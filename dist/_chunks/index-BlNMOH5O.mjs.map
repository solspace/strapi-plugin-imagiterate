{"version":3,"file":"index-BlNMOH5O.mjs","sources":["../../admin/src/pluginId.js","../../admin/src/utils/prefixPluginTranslations.js","../../admin/src/components/Initializer.jsx","../../admin/src/components/icons/AiIcon.jsx","../../admin/src/index.js"],"sourcesContent":["export const PLUGIN_ID = \"imagiterate\";\n","const prefixPluginTranslations = (trad, pluginId) => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {});\n};\n\nexport { prefixPluginTranslations };\n","import { useEffect, useRef } from \"react\";\n\nimport { PLUGIN_ID } from \"../pluginId\";\n\n/**\n * @type {import('react').FC<{ setPlugin: (id: string) => void }>}\n */\nconst Initializer = ({ setPlugin }) => {\n  const ref = useRef(setPlugin);\n\n  useEffect(() => {\n    ref.current(PLUGIN_ID);\n  }, []);\n\n  return null;\n};\n\nexport { Initializer };\n","import { Sparkles } from \"lucide-react\";\n\nconst AiIcon = () => <Sparkles size={10} color=\"#666666\" strokeWidth={1} />;\n\nexport { AiIcon };\n","import { getTranslation } from \"./utils/getTranslation\";\nimport { prefixPluginTranslations } from \"./utils/prefixPluginTranslations\";\nimport { PLUGIN_ID } from \"./pluginId\";\nimport { Initializer } from \"./components/Initializer\";\nimport { AiIcon } from \"./components/icons/AiIcon\";\n\nexport default {\n  register(app) {\n    app.registerPlugin({\n      id: PLUGIN_ID,\n      initializer: Initializer,\n      isReady: false,\n      name: PLUGIN_ID,\n    });\n\n    app.customFields.register({\n      name: \"imagiterateField\",\n      pluginId: PLUGIN_ID,\n      type: \"string\",\n      icon: AiIcon,\n      intlLabel: {\n        id: \"imagiterate.imagiterateField.label\",\n        defaultMessage: \"Imagiterate Field\",\n      },\n      intlDescription: {\n        id: \"imagiterate.imagiterateField.description\",\n        defaultMessage: \"A plain AI field\",\n      },\n      icon: AiIcon,\n      components: {\n        Input: async () =>\n          import(\"./components/Input\").then((module) => ({\n            default: module.Input,\n          })),\n      },\n    });\n  },\n\n  async registerTrads({ locales }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch((error) => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      }),\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAY,MAAC,YAAY;ACAzB,MAAM,2BAA2B,CAAC,MAAM,aAAa;AAInD,SAAO,OAAO,KAAK,IAAI,EAAE,OAAO,CAAC,KAAK,YAAY;AAChD,QAAI,GAAG,QAAQ,IAAI,OAAO,EAAE,IAAI,KAAK,OAAO;AAC5C,WAAO;AAAA,EACT,GAAG,CAAA,CAAE;AACP;ACDA,MAAM,cAAc,CAAC,EAAE,gBAAgB;AACrC,QAAM,MAAM,OAAO,SAAS;AAE5B,YAAU,MAAM;AACd,QAAI,QAAQ,SAAS;AAAA,EACvB,GAAG,CAAA,CAAE;AAEL,SAAO;AACT;ACbA,MAAM,SAAS,MAAM,oBAAC,UAAA,EAAS,MAAM,IAAI,OAAM,WAAU,aAAa,GAAG;ACIzE,MAAA,QAAe;AAAA,EACb,SAAS,KAAK;AACZ,QAAI,eAAe;AAAA,MACjB,IAAI;AAAA,MACJ,aAAa;AAAA,MACb,SAAS;AAAA,MACT,MAAM;AAAA,IACZ,CAAK;AAED,QAAI,aAAa,SAAS;AAAA,MACxB,MAAM;AAAA,MACN,UAAU;AAAA,MACV,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,QACT,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACxB;AAAA,MACM,iBAAiB;AAAA,QACf,IAAI;AAAA,QACJ,gBAAgB;AAAA,MACxB;AAAA,MACM,MAAM;AAAA,MACN,YAAY;AAAA,QACV,OAAO,YACL,OAAO,sBAAoB,EAAE,KAAK,CAAC,YAAY;AAAA,UAC7C,SAAS,OAAO;AAAA,QAC5B,EAAY;AAAA,MACZ;AAAA,IACA,CAAK;AAAA,EACH;AAAA,EAEA,MAAM,cAAc,EAAE,WAAW;AAC/B,UAAM,gBAAgB,MAAM,QAAQ;AAAA,MAClC,QAAQ,IAAI,CAAC,WAAW;AACtB,eAAO,qIAAA,kBAAA,MAAA,SAAA,CAAA,EACJ,KAAK,CAAC,EAAE,SAAS,WAAW;AAC3B,iBAAO;AAAA,YACL,MAAM,yBAAyB,MAAM,SAAS;AAAA,YAC9C;AAAA,UACd;AAAA,QACU,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,iBAAO;AAAA,YACL,MAAM,CAAA;AAAA,YACN;AAAA,UACd;AAAA,QACU,CAAC;AAAA,MACL,CAAC;AAAA,IACP;AAEI,WAAO,QAAQ,QAAQ,aAAa;AAAA,EACtC;AACF;"}