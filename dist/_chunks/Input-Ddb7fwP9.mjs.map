{"version":3,"file":"Input-Ddb7fwP9.mjs","sources":["../../admin/src/utils/getTranslation.js","../../admin/src/components/Input.jsx"],"sourcesContent":["import { PLUGIN_ID } from \"../pluginId\";\n\nconst getTranslation = (id) => `${PLUGIN_ID}.${id}`;\n\nexport { getTranslation };\n","\"use client\";\n\nimport * as React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useField } from \"@strapi/strapi/admin\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardSubtitle,\n  CarouselInput,\n  CarouselSlide,\n  CarouselImage,\n  Field,\n  Flex,\n  Textarea,\n  Typography,\n  Modal,\n  Grid,\n} from \"@strapi/design-system\";\nimport { useParams } from \"react-router-dom\";\nimport { getTranslation } from \"../utils/getTranslation\";\n\nexport const Input = React.forwardRef((props, ref) => {\n  const {\n    name,\n    hint,\n    label,\n    labelAction,\n    required,\n    attribute,\n    disabled,\n    placeholder,\n    onChange,\n  } = props;\n\n  const field = useField(name);\n  const { formatMessage } = useIntl();\n\n  const { id: documentId } = useParams();\n\n  const [images, setImages] = React.useState([]);\n  const [activeImageIndex, setActiveImageIndex] = React.useState(0);\n  const [prompt, setPrompt] = React.useState(\"\");\n  const [isProcessing, setIsProcessing] = React.useState(false);\n  const [modalState, setModalState] = React.useState(\"closed\");\n  const [elapsedTime, setElapsedTime] = React.useState(0);\n  const [resultImage, setResultImage] = React.useState(\"\");\n  const [resultReasoning, setResultReasoning] = React.useState(\"\");\n  const [errorMessage, setErrorMessage] = React.useState(\"\");\n\n  const timerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const fetchDocument = async () => {\n      try {\n        const res = await fetch(\n          `/imagiterate/get-document?documentId=${documentId}`,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          },\n        );\n        const data = await res.json();\n        console.log(\"[v0] Document data:\", data);\n\n        // Build images array: originalImage first, then images array\n        const imagesList = [];\n        if (data.originalImage) {\n          imagesList.push(data.originalImage);\n        }\n        if (data.images && Array.isArray(data.images)) {\n          imagesList.push(...data.images);\n        }\n\n        setImages(imagesList);\n      } catch (err) {\n        console.error(\"[v0] Error fetching document:\", err);\n      }\n    };\n\n    if (documentId) fetchDocument();\n  }, [documentId]);\n\n  React.useEffect(() => {\n    if (modalState === \"loading\") {\n      timerRef.current = setInterval(() => {\n        setElapsedTime((prev) => prev + 1);\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n      if (modalState === \"closed\") {\n        setElapsedTime(0);\n      }\n    }\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [modalState]);\n\n  const handleChange = (e) => {\n    onChange({\n      target: {\n        name,\n        type: attribute.type,\n        value: e.currentTarget.value,\n      },\n    });\n  };\n\n  const handlePromptChange = (e) => {\n    setPrompt(e.target.value);\n  };\n\n  const handleSubmit = async () => {\n    if (!prompt.trim()) {\n      return; // Don't submit empty prompts\n    }\n\n    if (images.length === 0 || !images[activeImageIndex]) {\n      return;\n    }\n\n    setIsProcessing(true);\n    setModalState(\"loading\");\n    setElapsedTime(0);\n\n    try {\n      const activeImage = images[activeImageIndex];\n      const res = await fetch(\"/imagiterate/admin-iterate\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          prompt,\n          documentId,\n          url: activeImage.url,\n        }),\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || \"Failed to process image\");\n      }\n\n      const data = await res.json();\n      console.log(\"[v0] Iterate response:\", data);\n\n      setResultImage(data.base64Image);\n      setResultReasoning(data.reasoning);\n      setModalState(\"success\");\n    } catch (err) {\n      console.error(\"[v0] Error processing image:\", err);\n      setErrorMessage(err instanceof Error ? err.message : \"An error occurred\");\n      setModalState(\"error\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleSaveImage = async () => {\n    try {\n      const res = await fetch(\"/imagiterate/save-image\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          documentId: documentId,\n          imageUrl: resultImage,\n        }),\n      });\n\n      if (!res.ok) {\n        throw new Error(\"Failed to save image\");\n      }\n\n      const savedImage = await res.json();\n      console.log(\"[v0] Saved image:\", savedImage);\n\n      // Add new image to carousel and make it active\n      const newImages = [...images, savedImage];\n      setImages(newImages);\n      setActiveImageIndex(newImages.length - 1);\n\n      // Close modal and reset\n      setModalState(\"closed\");\n      setPrompt(\"\");\n      setResultImage(\"\");\n      setResultReasoning(\"\");\n    } catch (err) {\n      console.error(\"[v0] Error saving image:\", err);\n      setErrorMessage(\"Failed to save image to collection\");\n      setModalState(\"error\");\n    }\n  };\n\n  const handleCloseModal = () => {\n    setModalState(\"closed\");\n    setPrompt(\"\");\n    setResultImage(\"\");\n    setResultReasoning(\"\");\n    setErrorMessage(\"\");\n  };\n\n  const formatElapsedTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  return (\n    <Field.Root\n      name={name}\n      id={name}\n      error={field.error}\n      hint={hint}\n      required={required}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        <Card>\n          <CardHeader>\n            <Typography fontWeight=\"bold\">\n              <Language id=\"imagiterateAi\" />\n            </Typography>\n          </CardHeader>\n          <CardSubtitle>\n            <Typography>\n              <Language id=\"subtitle\" />\n            </Typography>\n          </CardSubtitle>\n\n          <CardBody>\n            <Grid.Root gap={4}>\n              {/* Left column: Carousel */}\n              <Grid.Item col={7} xs={12}>\n                <Box>\n                  <Typography\n                    variant=\"sigma\"\n                    fontWeight=\"bold\"\n                    marginBottom={2}\n                  >\n                    <Language id=\"images\" />\n                  </Typography>\n\n                  {images.length === 0 ? (\n                    <Box\n                      background=\"neutral100\"\n                      padding={8}\n                      hasRadius\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\",\n                        minHeight: \"300px\",\n                      }}\n                    >\n                      <Typography variant=\"omega\" textColor=\"neutral600\">\n                        <Language id=\"noImagesAvailable\" />\n                      </Typography>\n                    </Box>\n                  ) : (\n                    <CarouselInput\n                      label={`Image carousel (${activeImageIndex + 1}/${images.length})`}\n                      selectedSlide={activeImageIndex}\n                      previousLabel=\"Previous slide\"\n                      nextLabel=\"Next slide\"\n                      onNext={() =>\n                        setActiveImageIndex((prev) =>\n                          prev < images.length - 1 ? prev + 1 : 0,\n                        )\n                      }\n                      onPrevious={() =>\n                        setActiveImageIndex((prev) =>\n                          prev > 0 ? prev - 1 : images.length - 1,\n                        )\n                      }\n                      // remove actions to drop the edit/link/delete/publish bar\n                      style={{ width: \"100%\" }}\n                    >\n                      {images.map((img, index) => (\n                        <CarouselSlide\n                          key={img.id || index}\n                          label={`${index + 1} of ${images.length} slides`}\n                        >\n                          <CarouselImage\n                            src={img.url || \"/placeholder.svg\"}\n                            alt={img.alternativeText || `Image ${index + 1}`}\n                          />\n                        </CarouselSlide>\n                      ))}\n                    </CarouselInput>\n                  )}\n                </Box>\n              </Grid.Item>\n\n              {/* Right column: Prompt */}\n              <Grid.Item col={5} xs={12}>\n                <Box width=\"100%\">\n                  <Field.Label>\n                    <Language id=\"prompt\" />\n                  </Field.Label>\n                  <Textarea\n                    ref={ref}\n                    aria-label={formatMessage({\n                      id: getTranslation(\"imagiterate.input.aria-label\"),\n                      defaultMessage: \"Imagiterate input\",\n                    })}\n                    name=\"prompt\"\n                    value={prompt}\n                    disabled={disabled || isProcessing || images.length === 0}\n                    required={required}\n                    placeholder={placeholder || <Language id=\"enterAPrompt\" />}\n                    onChange={handlePromptChange}\n                  />\n                  <Box marginTop={2}>\n                    <Button\n                      onClick={handleSubmit}\n                      disabled={\n                        !prompt.trim() || isProcessing || images.length === 0\n                      }\n                      loading={isProcessing}\n                    >\n                      <Language id=\"submit\" />\n                    </Button>\n                  </Box>\n                </Box>\n              </Grid.Item>\n            </Grid.Root>\n\n            <Field.Hint />\n            <Field.Error />\n          </CardBody>\n        </Card>\n      </Flex>\n\n      {modalState !== \"closed\" && (\n        <Modal.Root open onOpenChange={handleCloseModal}>\n          <Modal.Content>\n            <Modal.Header>\n              <Modal.Title>\n                {modalState === \"loading\" && <Language id=\"processingImage\" />}\n                {modalState === \"success\" && <Language id=\"aiModifiedImage\" />}\n                {modalState === \"error\" && <Language id=\"error\" />}\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {modalState === \"loading\" && (\n                <Box>\n                  {/* Timer */}\n                  <Flex justifyContent=\"center\" marginBottom={4}>\n                    <Typography variant=\"omega\" textColor=\"neutral600\">\n                      <Language id=\"timeElapsed\" />:{\" \"}\n                      {formatElapsedTime(elapsedTime)}\n                    </Typography>\n                  </Flex>\n\n                  {/* Skeleton loaders */}\n                  <Box marginBottom={4}>\n                    <Box\n                      background=\"neutral200\"\n                      hasRadius\n                      style={{\n                        width: \"100%\",\n                        height: \"300px\",\n                        animation:\n                          \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                      }}\n                    />\n                  </Box>\n                  <Box>\n                    <Box\n                      background=\"neutral200\"\n                      hasRadius\n                      style={{\n                        width: \"100%\",\n                        height: \"20px\",\n                        marginBottom: \"8px\",\n                        animation:\n                          \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                      }}\n                    />\n                    <Box\n                      background=\"neutral200\"\n                      hasRadius\n                      style={{\n                        width: \"80%\",\n                        height: \"20px\",\n                        animation:\n                          \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                      }}\n                    />\n                  </Box>\n                </Box>\n              )}\n\n              {modalState === \"success\" && (\n                <Box>\n                  {/* Result image */}\n                  <Box marginBottom={4}>\n                    <img\n                      src={resultImage || \"/placeholder.svg\"}\n                      alt=\"Modified image\"\n                      style={{\n                        width: \"100%\",\n                        height: \"auto\",\n                        borderRadius: \"4px\",\n                      }}\n                    />\n                  </Box>\n\n                  {/* AI reasoning */}\n                  <Box>\n                    <Typography\n                      variant=\"sigma\"\n                      fontWeight=\"bold\"\n                      marginBottom={2}\n                    >\n                      <Language id=\"yourPrompt\" />:{\" \"}\n                    </Typography>\n                    <Typography variant=\"omega\">{prompt}</Typography>\n                  </Box>\n                </Box>\n              )}\n\n              {modalState === \"error\" && (\n                <Box>\n                  <Typography variant=\"omega\" textColor=\"danger600\">\n                    {errorMessage}\n                  </Typography>\n                </Box>\n              )}\n            </Modal.Body>\n            <Modal.Footer>\n              {modalState === \"success\" && (\n                <>\n                  <Button variant=\"tertiary\" onClick={handleCloseModal}>\n                    Dismiss\n                  </Button>\n                  <Button onClick={handleSaveImage}>\n                    <Language id=\"save\" />\n                  </Button>\n                </>\n              )}\n              {modalState === \"error\" && (\n                <Button onClick={handleCloseModal}>\n                  <Language id=\"close\" />\n                </Button>\n              )}\n            </Modal.Footer>\n          </Modal.Content>\n        </Modal.Root>\n      )}\n\n      <style>{`\n        @keyframes pulse {\n          0%, 100% {\n            opacity: 1;\n          }\n          50% {\n            opacity: 0.5;\n          }\n        }\n      `}</style>\n    </Field.Root>\n  );\n});\n\n// Helper: convert camelCase or idString into sentence case\nconst toSentenceCase = (str) => {\n  if (!str) return \"\";\n  // Insert space before capital letters and lowercase the rest\n  const withSpaces = str\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n    .replace(/[_-]/g, \" \");\n  return withSpaces.charAt(0).toUpperCase() + withSpaces.slice(1);\n};\n\n//\tLanguage translating component\nconst Language = ({ id }) => {\n  const { formatMessage } = useIntl();\n\n  return formatMessage({\n    id: getTranslation(`imagiterate.imagiterateField.${id}`),\n    defaultMessage: toSentenceCase(id),\n  });\n};\n"],"names":[],"mappings":"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"}