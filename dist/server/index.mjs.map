{"version":3,"file":"index.mjs","sources":["../../server/src/bootstrap.js","../../server/src/destroy.js","../../admin/src/pluginId.js","../../server/src/register.js","../../server/src/config/index.js","../../server/src/content-types/imagiterate/index.js","../../server/src/content-types/index.js","../../server/src/controllers/controller.js","../../server/src/controllers/index.js","../../server/src/middlewares/index.js","../../server/src/policies/index.js","../../server/src/routes/admin-api.js","../../server/src/routes/content-api.js","../../server/src/routes/index.js","../../node_modules/mime-db/index.js","../../node_modules/mime-types/index.js","../../server/src/services/adminIterate.js","../../server/src/services/document.js","../../server/src/services/iterate.js","../../server/src/services/upload.js","../../server/src/services/index.js","../../server/src/index.js"],"sourcesContent":["const bootstrap = ({ strapi }) => {\n  // bootstrap phase\n};\n\nexport default bootstrap;\n","const destroy = ({ strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","export const PLUGIN_ID = \"imagiterate\";\n","import { PLUGIN_ID } from \"/admin/src/pluginId\";\n\nconst register = ({ strapi }) => {\n  strapi.customFields.register({\n    name: \"imagiterateField\",\n    plugin: PLUGIN_ID,\n    type: \"string\",\n  });\n};\n\nexport default register;\n","export default {\n  default: ({ env }) => ({\n    replicateApiToken: env(\"REPLICATE_API_TOKEN\"),\n    replicateAiModel: env(\"REPLICATE_AI_MODEL\"),\n  }),\n  validator() {},\n};\n","\"use strict\";\n\nconst schema = require(\"./schema\");\n\nmodule.exports = {\n  schema,\n};\n","\"use strict\";\n\nconst imagiterate = require(\"./imagiterate\");\n\nmodule.exports = {\n  imagiterate,\n};\n","const controller = ({ strapi }) => ({\n  async iterate(ctx) {\n    ctx.body = await strapi\n      .plugin(\"imagiterate\")\n      .service(\"iterate\")\n      .refineImage(ctx);\n  },\n  async upload(ctx) {\n    ctx.body = await strapi\n      .plugin(\"imagiterate\")\n      .service(\"upload\")\n      .uploadImage(ctx);\n  },\n  async adminIterate(ctx) {\n    ctx.body = await strapi\n      .plugin(\"imagiterate\")\n      .service(\"adminIterate\")\n      .refineImage(ctx);\n  },\n  async getDocument(ctx) {\n    ctx.body = await strapi\n      .plugin(\"imagiterate\")\n      .service(\"document\")\n      .getDocument(ctx);\n  },\n  async saveImage(ctx) {\n    ctx.body = await strapi\n      .plugin(\"imagiterate\")\n      .service(\"document\")\n      .saveImage(ctx);\n  },\n});\n\nexport default controller;\n","import controller from \"./controller\";\n\nexport default {\n  controller,\n};\n","export default {};\n","export default {};\n","export default [\n  {\n    method: \"GET\",\n    path: \"/get-document\",\n    handler: \"controller.getDocument\",\n    config: {\n      auth: false,\n      policies: [],\n    },\n  },\n  {\n    method: \"POST\",\n    path: \"/admin-iterate\",\n    handler: \"controller.adminIterate\",\n    config: {\n      auth: false,\n      policies: [],\n    },\n  },\n  {\n    method: \"POST\",\n    path: \"/save-image\",\n    handler: \"controller.saveImage\",\n    config: {\n      auth: false,\n      policies: [],\n    },\n  },\n];\n","export default [\n  {\n    method: \"POST\",\n    path: \"/iterate\",\n    handler: \"controller.iterate\",\n    config: {\n      policies: [],\n    },\n  },\n  {\n    method: \"POST\",\n    path: \"/upload\",\n    handler: \"controller.upload\",\n    config: {\n      policies: [],\n    },\n  },\n];\n","import adminAPIRoutes from \"./admin-api\";\nimport contentAPIRoutes from \"./content-api\";\n\nconst routes = {\n  \"admin-action\": {\n    type: \"admin\",\n    routes: adminAPIRoutes,\n  },\n  \"content-api\": {\n    type: \"content-api\",\n    routes: contentAPIRoutes,\n  },\n};\n\nexport default routes;\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport mime from \"mime-types\";\nimport Replicate from \"replicate\";\n\nconst adminIterate = ({ strapi }) => ({\n  async refineImage(ctx) {\n    const { documentId, prompt, url, token } = ctx.request.body;\n\n    //  Do we have a document id?\n    if (!documentId) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingDocumentId\",\n          message: \"Please provide a document id.\",\n        },\n      };\n    }\n\n    //  Do we have a prompt?\n    if (!prompt) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingPrompt\",\n          message:\n            \"Please provide a prompt to guide the AI in processing your image.\",\n        },\n      };\n    }\n\n    //  Do we have an image url?\n    if (!url) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingImageUrl\",\n          message: \"Please provide an image url for the AI to process.\",\n        },\n      };\n    }\n\n    // Query\n    let imageDocument = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .findOne({\n        documentId,\n        populate: [\"images\"],\n      });\n    if (imageDocument.error) return imageDocument;\n\n    //  Instantiate Replicate\n    const { replicate, model } = getReplicate();\n    if (replicate.error) return replicate;\n\n    //  Now send it to Replicate for processing.\n    const input = {\n      input_image: url,\n      prompt,\n    };\n    const output = await replicate.run(model, { input });\n\n    //  Error?\n    if (output.error) return output;\n\n    //  Return image url\n    const blob = await output.blob();\n\n    //  Upload\n    const newUploadedFile = await uploadBlob(blob);\n    if (newUploadedFile.error) return newUploadedFile;\n\n    //  Merge new image into images array\n    const mergedImages = [\n      ...imageDocument.images.map((img) => img.id),\n      newUploadedFile[0].id,\n    ];\n\n    // Query\n    const update = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .update({\n        documentId,\n        data: {\n          images: mergedImages,\n        },\n      });\n    if (update.error) return update;\n\n    return { ...imageDocument, url: output.url(), alt: \"Alt text\", prompt };\n  },\n});\n\n//  Service loader\nconst getUploadService = () => {\n  return strapi.plugin(\"upload\").service(\"upload\");\n};\n\n//  Replicate api loader for clean error handling\nconst getReplicate = () => {\n  const token =\n    strapi.plugin(\"imagiterate\").config(\"replicateApiToken\") || null;\n  const model = strapi.plugin(\"imagiterate\").config(\"replicateAiModel\") || null;\n\n  if (!token) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateToken\",\n        message:\n          \"Please provide a valid API token for the Replicate AI service.\",\n      },\n    };\n  }\n\n  if (!model) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateApiModel\",\n        message: \"Please provide a valid model for the Replicate AI service.\",\n      },\n    };\n  }\n\n  const replicate = new Replicate({\n    auth: token,\n  });\n\n  return { replicate, model };\n};\n\nasync function uploadImage(file) {\n  // Instantiate our service\n  const uploadService = getUploadService();\n\n  const uploadedFile = await uploadService.upload({\n    data: {},\n    files: file,\n  });\n\n  return uploadedFile;\n}\n\nasync function uploadBlob(blob) {\n  // Convert blob → buffer\n  const buffer = Buffer.from(await blob.arrayBuffer());\n\n  // Resolve file extension from MIME type\n  const mimeType = blob.type || \"application/octet-stream\";\n  const ext = mime.extension(mimeType) || \"jpg\";\n\n  // Write buffer to a temp file\n  const strapiPath = strapi.config.get(\"server.dirs.public\");\n  const fileName = `/uploads/replicate-${Date.now()}.${ext}`;\n  const filePath = path.join(strapiPath, fileName);\n  await fs.writeFile(filePath, buffer);\n\n  // Build the file object Strapi expects\n  const stats = await fs.stat(filePath);\n  const file = {\n    filepath: filePath,\n    originalFilename: \"replicate-ai-file\",\n    mimetype: mimeType,\n    size: stats.size,\n  };\n\n  // Call Strapi’s upload service\n  const uploadedFile = await uploadImage(file);\n\n  // Clean up temp file\n  await fs.unlink(filePath);\n\n  return uploadedFile;\n}\n\nexport default adminIterate;\n","import fs from \"fs/promises\";\nimport path from \"path\";\n\nconst document = ({ strapi }) => ({\n  async getDocument(ctx) {\n    const { documentId } = ctx.request.query;\n\n    //  Do we have a document id?\n    if (!documentId) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingDocumentId\",\n          message: \"Please provide a document id.\",\n        },\n      };\n    }\n\n    // Query\n    let imageDocument = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .findOne({\n        documentId,\n        populate: [\"originalImage\", \"images\"],\n      });\n    if (imageDocument.error) return imageDocument;\n\n    return { ...imageDocument };\n  },\n});\n\nexport default document;\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport mime from \"mime-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validate as uuidValidate } from \"uuid\";\nimport Replicate from \"replicate\";\n\nconst iterate = ({ strapi }) => ({\n  async refineImage(ctx) {\n    const { documentId, prompt, url, token } = ctx.request.body;\n\n    //  Do we have a document id?\n    if (!documentId) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingDocumentId\",\n          message: \"Please provide a document id.\",\n        },\n      };\n    }\n\n    //  Do we have a prompt?\n    if (!prompt) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingPrompt\",\n          message:\n            \"Please provide a prompt to guide the AI in processing your image.\",\n        },\n      };\n    }\n\n    //  Do we have an image url?\n    if (!url) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingImageUrl\",\n          message: \"Please provide an image url for the AI to process.\",\n        },\n      };\n    }\n\n    //  Do we have a token? This helps us secure each api call once an image iteration is started by a user\n    if (!token) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingToken\",\n          message: \"Please provide a valid token.\",\n        },\n      };\n    }\n\n    if (!uuidValidate(token)) {\n      return {\n        error: {\n          status: 400,\n          name: \"InvalidTokenFormat\",\n          message: \"Please provide a token in a valid format.\",\n        },\n      };\n    }\n\n    // Query\n    let imageDocument = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .findOne({\n        documentId,\n        populate: [\"images\"],\n      });\n    if (imageDocument.error) return imageDocument;\n\n    if (token != imageDocument.token) {\n      return {\n        error: {\n          status: 400,\n          name: \"InvalidToken\",\n          message: \"Please provide a valid token.\",\n        },\n      };\n    }\n    /*\n    const fakeImages = [\n      'http://localhost:1337/uploads/steven_cordes_Exo0_AZ_Aye_M8_unsplash_c2cbe9f625.jpg',\n      'http://localhost:1337/uploads/celine_chamiot_poncet_DH_9_U5x8d_Ym_U_unsplash_205cff5701.jpg',\n      'http://localhost:1337/uploads/nick_van_den_berg_6x387_K_M_Wt_I_unsplash_87ae6e75ab.jpg',\n    ];\n    const randomImage = fakeImages[Math.floor(Math.random() * fakeImages.length)];\n*/\n\n    //  Instantiate Replicate\n    const { replicate, model } = getReplicate();\n    if (replicate.error) return replicate;\n\n    //  Now send it to Replicate for processing.\n    const input = {\n      input_image: url,\n      prompt,\n    };\n    const output = await replicate.run(model, { input });\n\n    //  Error?\n    if (output.error) return output;\n\n    //  Return image url\n    const blob = await output.blob();\n\n    //  Upload\n    const newUploadedFile = await uploadBlob(blob);\n    if (newUploadedFile.error) return newUploadedFile;\n\n    //  Merge new image into images array\n    const mergedImages = [\n      ...imageDocument.images.map((img) => img.id),\n      newUploadedFile[0].id,\n    ];\n\n    // Query\n    const update = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .update({\n        documentId,\n        data: {\n          images: mergedImages,\n        },\n      });\n    if (update.error) return update;\n\n    return { ...imageDocument, url: output.url(), alt: \"Alt text\", prompt };\n  },\n});\n\n//  Service loader\nconst getUploadService = () => {\n  return strapi.plugin(\"upload\").service(\"upload\");\n};\n\n//  Replicate api loader for clean error handling\nconst getReplicate = () => {\n  const token =\n    strapi.plugin(\"imagiterate\").config(\"replicateApiToken\") || null;\n  const model = strapi.plugin(\"imagiterate\").config(\"replicateAiModel\") || null;\n\n  if (!token) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateToken\",\n        message:\n          \"Please provide a valid API token for the Replicate AI service.\",\n      },\n    };\n  }\n\n  if (!model) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateApiModel\",\n        message: \"Please provide a valid model for the Replicate AI service.\",\n      },\n    };\n  }\n\n  const replicate = new Replicate({\n    auth: token,\n  });\n\n  return { replicate, model };\n};\n\nasync function uploadImage(file) {\n  // Instantiate our service\n  const uploadService = getUploadService();\n\n  const uploadedFile = await uploadService.upload({\n    data: {},\n    files: file,\n  });\n\n  return uploadedFile;\n}\n\nasync function uploadBlob(blob) {\n  // Convert blob → buffer\n  const buffer = Buffer.from(await blob.arrayBuffer());\n\n  // Resolve file extension from MIME type\n  const mimeType = blob.type || \"application/octet-stream\";\n  const ext = mime.extension(mimeType) || \"jpg\";\n\n  // Write buffer to a temp file\n  const strapiPath = strapi.config.get(\"server.dirs.public\");\n  const fileName = `/uploads/replicate-${Date.now()}.${ext}`;\n  const filePath = path.join(strapiPath, fileName);\n  await fs.writeFile(filePath, buffer);\n\n  // Build the file object Strapi expects\n  const stats = await fs.stat(filePath);\n  const file = {\n    filepath: filePath,\n    originalFilename: \"replicate-ai-file\",\n    mimetype: mimeType,\n    size: stats.size,\n  };\n\n  // Call Strapi’s upload service\n  const uploadedFile = await uploadImage(file);\n\n  // Clean up temp file\n  await fs.unlink(filePath);\n\n  return uploadedFile;\n}\n\nexport default iterate;\n","import fs from \"fs/promises\";\nimport path from \"path\";\nimport mime from \"mime-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { validate as uuidValidate } from \"uuid\";\nimport Replicate from \"replicate\";\n\nconst upload = ({ strapi }) => ({\n  async uploadImage(ctx) {\n    const { prompt } = ctx.request.body;\n\n    //  Do we have a prompt?\n    if (!prompt) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingPrompt\",\n          message:\n            \"Please provide a prompt to guide the AI in processing your image.\",\n        },\n      };\n    }\n\n    //  Make sure we have an uploaded image\n    const { files } = ctx.request;\n\n    if (!files.image) {\n      return {\n        error: {\n          status: 400,\n          name: \"MissingImage\",\n          message: \"Please upload an image.\",\n        },\n      };\n    }\n\n    //  First upload straight into Strapi. Strapi can deal with the mess of files.\n    const uploadedFile = await uploadImage(files.image);\n    if (uploadedFile.error) return uploadedFile;\n\n    //console.log('uploaded', uploadedFile);\n\n    // Query\n    let create = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .create({\n        data: {\n          originalImage: uploadedFile[0].id,\n          token: uuidv4(),\n        },\n      });\n    if (create.error) return create;\n\n    //  Set the document id of the collection entry\n    const documentId = create.documentId;\n\n    //  Fetch the image\n    const base64Image = await getBase64Image(uploadedFile[0].url);\n    if (base64Image.error) return base64Image;\n\n    //  Instantiate Replicate\n    const { replicate, model } = getReplicate();\n    if (replicate.error) return replicate;\n\n    //  Now send it to Replicate for processing.\n    const input = {\n      input_image: base64Image,\n      prompt,\n    };\n    const output = await replicate.run(model, { input });\n\n    //  Error?\n    if (output.error) return output;\n\n    //  Return image url\n    const blob = await output.blob();\n\n    //  Upload\n    const newUploadedFile = await uploadBlob(blob);\n    if (newUploadedFile.error) return newUploadedFile;\n\n    // Query\n    const update = await strapi\n      .documents(\"plugin::imagiterate.imagiterate\")\n      .update({\n        documentId,\n        data: {\n          images: [newUploadedFile[0].id],\n        },\n      });\n    if (update.error) return update;\n\n    return { ...update, url: output.url(), alt: \"Alt text\", prompt };\n  },\n});\n\n//  Service loader\nconst getUploadService = () => {\n  return strapi.plugin(\"upload\").service(\"upload\");\n};\n\n//  Replicate api loader for clean error handling\nconst getReplicate = () => {\n  const token =\n    strapi.plugin(\"imagiterate\").config(\"replicateApiToken\") || null;\n  const model = strapi.plugin(\"imagiterate\").config(\"replicateAiModel\") || null;\n\n  if (!token) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateToken\",\n        message:\n          \"Please provide a valid API token for the Replicate AI service.\",\n      },\n    };\n  }\n\n  if (!model) {\n    return {\n      error: {\n        status: 400,\n        name: \"MissingReplicateApiModel\",\n        message: \"Please provide a valid model for the Replicate AI service.\",\n      },\n    };\n  }\n\n  const replicate = new Replicate({\n    auth: token,\n  });\n\n  return { replicate, model };\n};\n\nasync function uploadImage(file) {\n  // Instantiate our service\n  const uploadService = getUploadService();\n\n  const uploadedFile = await uploadService.upload({\n    data: {},\n    files: file,\n  });\n\n  return uploadedFile;\n}\n\n//\tUpload blob\nasync function uploadBlob(blob) {\n  // Convert blob → buffer\n  const buffer = Buffer.from(await blob.arrayBuffer());\n\n  // Resolve file extension from MIME type\n  const mimeType = blob.type || \"application/octet-stream\";\n  const ext = mime.extension(mimeType) || \"jpg\";\n\n  // Write buffer to a temp file\n  const strapiPath = strapi.config.get(\"server.dirs.public\");\n  const fileName = `/uploads/replicate-${Date.now()}.${ext}`;\n  const filePath = path.join(strapiPath, fileName);\n  await fs.writeFile(filePath, buffer);\n\n  // Build the file object Strapi expects\n  const stats = await fs.stat(filePath);\n  const file = {\n    filepath: filePath,\n    originalFilename: \"replicate-ai-file\",\n    mimetype: mimeType,\n    size: stats.size,\n  };\n\n  // Call Strapi’s upload service\n  const uploadedFile = await uploadImage(file);\n\n  // Clean up temp file\n  await fs.unlink(filePath);\n\n  return uploadedFile;\n}\n\n//\tGet base 64 image\nasync function getBase64Image(imageUrl) {\n  //  Handle both local and remote urls\n  if (imageUrl.startsWith(\"http\")) {\n    // Remote fetch\n    const imageResponse = await fetch(imageUrl);\n\n    if (!imageResponse.ok) {\n      return {\n        error: {\n          status: 400,\n          name: \"FailedImageFetchImage\",\n          message:\n            \"Please to fetch image from remote server. \" +\n            imageResponse.statusText,\n        },\n      };\n    }\n\n    const buffer = Buffer.from(await imageResponse.arrayBuffer());\n    const base64Image = `data:image/png;base64,${buffer.toString(\"base64\")}`;\n\n    return base64Image;\n  } else {\n    // Local read\n    const strapiPath = strapi.config.get(\"server.dirs.public\");\n    const filePath = path.join(strapiPath, imageUrl);\n    const buffer = await fs.readFile(filePath);\n    const base64Image = `data:image/png;base64,${buffer.toString(\"base64\")}`;\n\n    return base64Image;\n  }\n}\n\nexport default upload;\n","import adminIterate from \"./adminIterate\";\nimport document from \"./document\";\nimport iterate from \"./iterate\";\nimport upload from \"./upload\";\n\nexport default {\n  adminIterate,\n  document,\n  iterate,\n  upload,\n};\n","/**\n * Application methods\n */\nimport bootstrap from \"./bootstrap\";\nimport destroy from \"./destroy\";\nimport register from \"./register\";\n\n/**\n * Plugin server methods\n */\nimport config from \"./config\";\nimport contentTypes from \"./content-types\";\nimport controllers from \"./controllers\";\nimport middlewares from \"./middlewares\";\nimport policies from \"./policies\";\nimport routes from \"./routes\";\nimport services from \"./services\";\n\nexport default {\n  bootstrap,\n  destroy,\n  register,\n  config,\n  controllers,\n  contentTypes,\n  middlewares,\n  policies,\n  routes,\n  services,\n};\n"],"names":["strapi","require$$0","imagiterate","require$$1","mime","charset","path","extension","getReplicate","uploadBlob","getUploadService","uploadImage","uuidValidate","uuidv4","contentTypes"],"mappings":"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","x_google_ignoreList":[14,15]}